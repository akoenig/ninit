#!/usr/bin/env node

/*
 * ninit - node module bootstrapper
 *
 * Copyright(c) 2014 André König <andre.koenig@posteo.de>
 * MIT Licensed
 *
 */

/**
 * @author André König <andre.koenig@posteo.de>
 *
 */

'use strict';

var fs = require('fs');
var path = require('path');
var readline = require('readline');
var chalk = require('chalk');
var pkg = require('../package.json');
var ninit = require('../');
var Helpers = require('../lib/utilities');

module.exports = (function main () {

    var templateDir = path.join(__dirname, '..', 'templates');
    var templateName = process.argv[2];
    var cli = readline.createInterface(process.stdin, process.stdout);
    var specification = {};
    var tokens;
    var pkgjson;

    function next () {
        var token = tokens.pop();

        if (token) {
            cli.setPrompt('[' + pkg.name + '] ' + token.charAt(0).toUpperCase() + token.slice(1) + ': ');
            cli.prompt();

            cli.once('line', function (value) {
                value = value.trim();

                specification[token] = value;

                next();
            });
        } else {
            return done();
        }
    }

    function done () {
        ninit.generate(templateName, specification)
            .once('error', function onError (err) {
                console.error('\n' + chalk.red(err.toString()));

                process.exit(1)
            })
            .once('done', function onDone () {
                console.log(chalk.green('\n... created!'));

                process.exit(0)
            });
    }

    if (!templateName) {
        console.log('%s - %s', pkg.name, pkg.description);
        console.log('Usage: %s template-name', pkg.name);

        console.error(chalk.red('Missing template name. If you would like to see a list of template, use `%s ls`'), pkg.name);

        return process.exit(1);
    } else if ('ls' === templateName) {
        fs.readdirSync(templateDir).sort().forEach(function onTemplate (template) {
            console.log(chalk.green(template));
        });

        return process.exit(0);
    } else if ('version' === templateName) {
        console.log(chalk.green(pkg.version));

        return process.exit(0);
    }

    pkgjson = path.join(templateDir, templateName, 'package.json')

    if (fs.existsSync(pkgjson)) {
        tokens = Helpers.getTokens(fs.readFileSync(pkgjson)).reverse();

        next();
    } else {
        console.error(chalk.red('Template "%s" does not exist, use `%s ls` for a template listing'), templateName, pkg.name);

        return process.exit(1);
    }
})();